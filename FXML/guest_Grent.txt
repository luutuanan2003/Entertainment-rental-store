public String Grent(TextField customerIDField, TextField itemIDField) {
        String customerID = customerIDField.getText().trim();

        boolean validCustomerID = validateCustomerID(customerID);

        if (!validCustomerID) {
            displayAlert("Invalid customer ID format. Please provide a valid customer ID.");
            return customerID;
        }

        boolean customerFound = checkCustomerExists(customerID);

        if (!customerFound) {
            displayAlert("Customer not found with ID: " + customerID);
            return customerID;
        }

        String accountType = getAccountType(customerID);
        int numberOfRentals = getTotalRentalItems(customerID);

        if (accountType.equals("Guest") && numberOfRentals == 2) {
            displayAlert("You have reached your maximum rental items.");
            return customerID;
        }

        // Display customer ID verified message
        displayAlert("Customer ID verified");
        // ...

        // Prompt user for item ID
        String itemID = itemIDField.getText().trim();

        boolean validItemID = validateItemID(itemID);

        if (!validItemID) {
            displayAlert("Invalid item ID format. Please provide a valid item ID.");
            return customerID;
        }

        String loanType = getLoanType(itemID);

        if (accountType.equals("Guest") && loanType.equals("2-day")) {
            displayAlert("You are not allowed to rent this kind of item");
            return customerID;
        }

        boolean itemFound = checkItemExists(itemID);

        if (!itemFound) {
            displayAlert("Item not found with ID: " + itemID);
            return customerID;
        }

        // Display item details
        displayAlert("Item ID: " + itemID);
        // ...

        // Store the customer ID, item ID, and quantity in the orders array
        String[][] orders = new String[1][2];
        orders[0][0] = customerID;
        orders[0][1] = itemID;
        // ...

        // Print the order details
        displayAlert("Order Details:\nCustomer ID: " + customerID + "\nItem ID: " + itemID);
        // ...

        // Save the order details to the orders.txt file
        saveOrderDetails(customerID, itemID);

        return customerID;
    }

    private boolean validateCustomerID(String customerID) {
        // Validate customer ID logic
        if (!customerID.matches("C\\d{3}")) {
            return false;
        } else {
            boolean customerFound = false;

            try (BufferedReader br = new BufferedReader(new FileReader("customers.txt"))) {
                String line;
                while ((line = br.readLine()) != null) {
                    String[] customerInfo = line.split(",");
                    if (customerInfo[0].equals(customerID)) {
                        customerFound = true;
                        break;
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

            if (customerFound) {
                return true;
            } else {
                System.out.println("Customer not found with ID: " + customerID);
                return false;
            }
        }
    }

    private boolean checkCustomerExists(String customerID) {
        boolean customerExists = false;
        try (BufferedReader br = new BufferedReader(new FileReader("customers.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] customerInfo = line.split(",");
                if (customerInfo[0].equals(customerID)) {
                    customerExists = true;
                    break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return customerExists;
    }

    private String getAccountType(String customerID) {
        String accountType = "";
        try (BufferedReader br = new BufferedReader(new FileReader("customers.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] customerInfo = line.split(",");
                if (customerInfo[0].equals(customerID)) {
                    accountType = customerInfo[5];
                    break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return accountType;
    }

    private int getTotalRentalItems(String customerID) {
        int totalRentalItems = 0;
        try (BufferedReader br = new BufferedReader(new FileReader("customers.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] customerInfo = line.split(",");
                if (customerInfo[0].equals(customerID)) {
                    totalRentalItems = Integer.parseInt(customerInfo[4]);
                    break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return totalRentalItems;
    }

    private boolean validateItemID(String itemID) {
        // Validate item ID logic
        if (!itemID.matches("I\\d{3}-\\d{4}(,.+)?")) {
            return false;
        } else {
            // Additional validation logic if needed
            return true;
        }
    }

    private boolean checkItemExists(String itemID) {
        boolean itemExists = false;
        try (BufferedReader br = new BufferedReader(new FileReader("items.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] itemInfo = line.split(",");
                if (itemInfo[0].equals(itemID)) {
                    itemExists = true;
                    break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return itemExists;
    }

    private String getLoanType(String itemID) {
        String loanType = "";
        try (BufferedReader br = new BufferedReader(new FileReader("items.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] itemInfo = line.split(",");
                if (itemInfo[0].equals(itemID)) {
                    loanType = itemInfo[3];
                    break;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return loanType;
    }

    private void saveOrderDetails(String customerID, String itemID) {
        // Save the order details to the orders.txt file
        // ...

        // Example code to save order details to a file
        try (BufferedWriter bw = new BufferedWriter(new FileWriter("orders.txt", true))) {
            bw.write(customerID + "," + itemID);
            bw.newLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void displayAlert(String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }
}