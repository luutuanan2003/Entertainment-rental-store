import javafx.fxml.FXML;
import javafx.scene.control.Alert;
import javafx.scene.control.TextField;

import java.io.*;

public class CustomerController {
    @FXML
    private TextField customerIDField;

    @FXML
    private TextField itemIDField;

    // Other controller methods

    @FXML
    public void returned() {
        String customerID = customerIDField.getText().trim();
        boolean validCustomerID = validateCustomerID(customerID);

        if (validCustomerID) {
            boolean customerExists = checkCustomerExists(customerID);

            if (!customerExists) {
                displayAlert("Customer not found with ID: " + customerID);
            } else {
                String itemID = itemIDField.getText().trim();
                boolean validItemID = validateItemID(itemID);

                if (validItemID) {
                    boolean itemReturned = returnItem(customerID, itemID);

                    if (itemReturned) {
                        displayReturnOrderConfirmation(customerID, itemID);
                    } else {
                        displayAlert("Failed to process return order. Please try again.");
                    }
                } else {
                    displayAlert("Invalid item ID. Please enter a valid item ID.");
                }
            }
        } else {
            displayAlert("Invalid customer ID format. Please provide a valid customer ID.");
        }
    }

    // Other methods

    private boolean validateCustomerID(String customerID) {
        // Validate customer ID logic
        if (!customerID.matches("C\\d{3}")) {
            return false;
        } else {
            boolean customerFound = false;

            try (BufferedReader br = new BufferedReader(new FileReader("customers.txt"))) {
                String line;
                while ((line = br.readLine()) != null) {
                    String[] customerInfo = line.split(",");
                    if (customerInfo[0].equals(customerID)) {
                        customerFound = true;
                        break;
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

            if (customerFound) {
                return true;
            } else {
                System.out.println("Customer not found with ID: " + customerID);
                return false;
            }
        }
    }

    private boolean validateItemID(String itemID) {
        // Validate item ID logic
        if (!itemID.matches("I\\d{3}-\\d{4}(,.+)?")) {
            return false;
        } else {
            // Additional validation logic if needed
            return true;
        }
    }

    private boolean checkCustomerExists(String customerID) {
        try (BufferedReader br = new BufferedReader(new FileReader("customers.txt"))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] info = line.split(",");
                if (info[0].equals(customerID)) {
                    return true;
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return false;
    }

    private boolean returnItem(String customerID, String itemID) {
        // Perform the return operation
        // ...

        try {
            File inputFile = new File("customers.txt");
            File tempFile = new File("temp.txt");

            BufferedReader reader = new BufferedReader(new FileReader(inputFile));
            BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));

            String line;
            while ((line = reader.readLine()) != null) {
                String[] info = line.split(",");
                if (info[0].equals(customerID)) {
                    StringBuilder updatedLine = new StringBuilder(info[0]);
                    for (int i = 1; i < info.length; i++) {
                        if (info[i].equals(itemID)) {
                            updatedLine.append(",RETURNED");
                        } else {
                            updatedLine.append(",").append(info[i]);
                        }
                    }
                    writer.write(updatedLine.toString());
                } else {
                    writer.write(line);
                }
                writer.newLine();
            }

            writer.close();
            reader.close();

            // Replace the original file with the updated file
            if (inputFile.delete()) {
                if (!tempFile.renameTo(inputFile)) {
                    System.out.println("Failed to rename the temporary file.");
                    return false;
                }
            } else {
                System.out.println("Failed to delete the original file.");
                return false;
            }
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }

        return true;
    }

    private void displayAlert(String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle("Error");
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    private void displayReturnOrderConfirmation(String customerID, String itemID) {
        String confirmationMessage = "Return order confirmed:\n" +
                "Customer ID: " + customerID + "\n" +
                "Item ID: " + itemID + "\n" +
                "------------";

        // Display the confirmation message in the appropriate text fields or labels
        // ...
    }
}
